from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from keyboards.default import main_keyboard
from loader import dp, db
from utils.misc.search_result import search_result_string


@dp.message_handler(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def start_search(message: types.Message, state: FSMContext):
    cancel_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")]], resize_keyboard=True)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞", reply_markup=cancel_keyboard)
    await state.set_state("search")


@dp.message_handler(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", state="search")
async def search(message: types.Message, state: FSMContext):
    await message.answer("–°–¥–µ–ª–∞—Ç—å —á—Ç–æ –Ω–∏–±—É–¥—å –µ—â—ë? ‚ú®", reply_markup=main_keyboard)
    await state.finish()


@dp.message_handler(state="search")
async def search(message: types.Message):
    query = message.text
    msgs = search_result_string(db, query)
    for msg in msgs:
        await message.answer(msg)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ä—Ç–∞")
